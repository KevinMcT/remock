plugins {
    id 'java-library'
    id "com.vanniktech.maven.publish" version "0.29.0"
}

group = 'no.saua.remock'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
version = 'RC2-2.1.0'

repositories {
    mavenCentral()
}

ext {
    minimumSpringVersion = '5.0.0.RELEASE'
}

dependencies {
    api 'org.mockito:mockito-core:4.4.0'
    api 'org.springframework:spring-test:' + minimumSpringVersion
    api 'org.springframework:spring-context:' + minimumSpringVersion

    implementation 'org.slf4j:slf4j-api:1.7.7'
    implementation 'javax.inject:javax.inject:1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Logging
    testImplementation 'org.apache.logging.log4j:log4j-api:2.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.1'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.1'
    testImplementation 'org.slf4j:jcl-over-slf4j:1.7.10'

    // Testing webapp mocking
    testImplementation 'org.springframework:spring-webmvc:' + minimumSpringVersion
    testImplementation 'javax.servlet:javax.servlet-api:3.1.0'
}

// Test against multiple versions of spring.
def springVersionsToTest = [minimumSpringVersion, '5.0.+', '5.1.+', '5.2.+', '5.3.+']
springVersionsToTest.each { version ->
    def config = configurations.create("testSpringCompile_" + version)
    config.extendsFrom(configurations.testImplementation)
    config.resolutionStrategy.eachDependency {
        if (it.requested.group == 'org.springframework') {
            it.useVersion version
        }
    }

    tasks.create(name: "testSpring_$version", type: Test) {
        classpath = config + sourceSets.main.output + sourceSets.test.output
        check.dependsOn it
    }
}

javadoc {
    // While remock is not dependant on junit, parts of Mockito uses junit.
    // This causes the javadoc-er to malfunction because it is unable to read those
    // without. Using the sourceSets.main.runtimeClasspath fixes this.
    // ... also note that sonatype actually requires a javadoc even though we supply sources.
    classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(Test).configureEach {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
    // Exclude the inner classes of ContextCacheTest, but not the class itself. Gradle will try to run both the suite
    // and the tests alone. Alone will fail because the tests are dependent on the run-order.
    exclude 'no/saua/remock/ContextCacheTest$*'
}

wrapper {
    gradleVersion = '8.10.2'
}


import com.vanniktech.maven.publish.SonatypeHost
mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
}

mavenPublishing {
    coordinates("no.saua.remock", "remock", project.version)

    pom {
        name = 'remock'
        description = 'Remock is a library for mocking up Spring beans with Mockito'
        url = 'https://github.com/ksaua/remock'
        inceptionYear = '2015'
        licenses {
            license {
                name = 'The MIT License'
                url = 'http://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }
        developers {
            developer {
                id = 'ksaua'
                name = 'Knut Saua Mathiesen'
            }
        }
        scm {
            url = 'scm:git@github.com:ksaua/remock.git'
            connection = 'scm:git@github.com:ksaua/remock.git'
            developerConnection = 'scm:git@github.com:ksaua/remock.git'
        }
    }
}
